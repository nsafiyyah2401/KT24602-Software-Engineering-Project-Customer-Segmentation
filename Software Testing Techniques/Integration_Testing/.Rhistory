set.seed(1)
ggplot(customer_data, aes(x =Annual.Income..k.., y = Spending.Score..1.100.)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ",
breaks=c("1", "2", "3", "4", "5","6"),
labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5","Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
ggplot(customer_data, aes(x =Spending.Score..1.100., y =Age)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ",
breaks=c("1", "2", "3", "4", "5","6"),
labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5","Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
kCols=function(vec){cols=rainbow (length (unique (vec)))
return (cols[as.numeric(as.factor(vec))])}
digCluster<-k6$cluster; dignm<-as.character(digCluster); # K-means clusters
plot(pcclust$x[,1:2], col =kCols(digCluster),pch =19,xlab ="K-means",ylab="classes")
legend("bottomleft",unique(dignm),fill=unique(kCols(digCluster)))
use_testthat()
use_test()
use_test()
rlang::last_trace()
rlang::last_trace()
use_test()
expect_true(!is.null(customer_data))
library(testthat)
library(ggplot2)
library(purrr)
library(cluster)
library(NbClust)
library(factoextra)
library(plotrix)
customer_data <- read.csv("Mall_Customers.csv")
test_that("Data is loaded correctly", {
expect_true(!is.null(customer_data))
expect_true(nrow(customer_data) > 0)
expect_true(ncol(customer_data) > 0)
})
test_that("Statistical summaries are calculated correctly", {
age_summary <- summary(customer_data$Age)
expect_true(length(age_summary) > 0)
expect_true(!is.null(sd(customer_data$Age)))
income_summary <- summary(customer_data$Annual.Income..k..)
expect_true(length(income_summary) > 0)
expect_true(!is.null(sd(customer_data$Annual.Income..k..)))
spending_summary <- summary(customer_data$Spending.Score..1.100.)
expect_true(length(spending_summary) > 0)
expect_true(!is.null(sd(customer_data$Spending.Score..1.100.)))
})
test_that("Visualizations are created without errors", {
expect_error(barplot(table(customer_data$Gender)), NA)
expect_error(hist(customer_data$Age), NA)
expect_error(hist(customer_data$Annual.Income..k..), NA)
expect_error(plot(density(customer_data$Annual.Income..k..)), NA)
expect_error(boxplot(customer_data$Spending.Score..1.100.), NA)
expect_error(hist(customer_data$Spending.Score..1.100.), NA)
})
test_that("K-means clustering works correctly", {
iss <- function(k) {
kmeans(customer_data[,3:5], k, iter.max = 100, nstart = 100, algorithm = "Lloyd")$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
expect_true(length(iss_values) == length(k.values))
expect_true(all(iss_values >= 0))
k6 <- kmeans(customer_data[,3:5], 6, iter.max = 100, nstart = 50, algorithm = "Lloyd")
expect_true(!is.null(k6))
expect_true(length(k6$cluster) == nrow(customer_data))
expect_error({
ggplot(customer_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
}, NA)
expect_error({
ggplot(customer_data, aes(x = Spending.Score..1.100., y = Age)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
}, NA)
})
test_that("K-means clustering works correctly", {
iss <- function(k) {
kmeans(customer_data[,3:5], k, iter.max = 100, nstart = 100, algorithm = "Lloyd")$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
expect_true(length(iss_values) == length(k.values))
expect_true(all(iss_values >= 0))
k6 <- kmeans(customer_data[,3:5], 6, iter.max = 100, nstart = 100, algorithm = "Lloyd")
expect_true(!is.null(k6))
expect_true(length(k6$cluster) == nrow(customer_data))
expect_error({
ggplot(customer_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
}, NA)
expect_error({
ggplot(customer_data, aes(x = Spending.Score..1.100., y = Age)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
}, NA)
})
customer_data_scaled <- scale(customer_data[,3:5])
test_that("K-means clustering works correctly with scaled data", {
iss <- function(k) {
kmeans(customer_data_scaled, k, iter.max = 100, nstart = 100, algorithm = "Lloyd")$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
expect_true(length(iss_values) == length(k.values))
expect_true(all(iss_values >= 0))
k6 <- kmeans(customer_data_scaled, 6, iter.max = 100, nstart = 100, algorithm = "Lloyd")
expect_true(!is.null(k6))
expect_true(length(k6$cluster) == nrow(customer_data_scaled))
expect_error({
ggplot(customer_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
}, NA)
expect_error({
ggplot(customer_data, aes(x = Spending.Score..1.100., y = Age)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
}, NA)
})
test_that("Optimal number of clusters is determined correctly", {
iss <- function(k) {
kmeans(customer_data_scaled, k, iter.max = 100, nstart = 100, algorithm = "Lloyd")$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
expect_true(length(iss_values) == length(k.values))
expect_true(all(iss_values >= 0))
elbow_plot <- ggplot(data.frame(k = k.values, tot.withinss = iss_values), aes(x = k, y = tot.withinss)) +
geom_point() +
geom_line() +
ggtitle("Elbow Method for Optimal Number of Clusters") +
xlab("Number of Clusters K") +
ylab("Total Within-Cluster Sum of Squares")
print(elbow_plot)
})
library(testthat)
library(ggplot2)
library(purrr)
library(cluster)
library(NbClust)
library(factoextra)
library(plotrix)
customer_data <- read.csv("Mall_Customers.csv")
test_that("Data is loaded correctly", {
expect_true(!is.null(customer_data))
expect_true(nrow(customer_data) > 0)
expect_true(ncol(customer_data) > 0)
})
test_that("Statistical summaries are calculated correctly", {
age_summary <- summary(customer_data$Age)
expect_true(length(age_summary) > 0)
expect_true(!is.null(sd(customer_data$Age)))
income_summary <- summary(customer_data$Annual.Income..k..)
expect_true(length(income_summary) > 0)
expect_true(!is.null(sd(customer_data$Annual.Income..k..)))
spending_summary <- summary(customer_data$Spending.Score..1.100.)
expect_true(length(spending_summary) > 0)
expect_true(!is.null(sd(customer_data$Spending.Score..1.100.)))
})
test_that("Visualizations are created without errors", {
expect_error(barplot(table(customer_data$Gender)), NA)
expect_error(hist(customer_data$Age), NA)
expect_error(hist(customer_data$Annual.Income..k..), NA)
expect_error(plot(density(customer_data$Annual.Income..k..)), NA)
expect_error(boxplot(customer_data$Spending.Score..1.100.), NA)
expect_error(hist(customer_data$Spending.Score..1.100.), NA)
})
customer_data_scaled <- scale(customer_data[,3:5])
test_that("K-means clustering works correctly with scaled data", {
iss <- function(k) {
kmeans(customer_data_scaled, k, iter.max = 100, nstart = 100, algorithm = "Lloyd")$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
expect_true(length(iss_values) == length(k.values))
expect_true(all(iss_values >= 0))
k6 <- kmeans(customer_data_scaled, 6, iter.max = 100, nstart = 100, algorithm = "Lloyd")
expect_true(!is.null(k6))
expect_true(length(k6$cluster) == nrow(customer_data_scaled))
expect_error({
ggplot(customer_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
}, NA)
expect_error({
ggplot(customer_data, aes(x = Spending.Score..1.100., y = Age)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
}, NA)
})
test_that("Optimal number of clusters is determined correctly", {
iss <- function(k) {
kmeans(customer_data_scaled, k, iter.max = 100, nstart = 100, algorithm = "Lloyd")$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
expect_true(length(iss_values) == length(k.values))
expect_true(all(iss_values >= 0))
elbow_plot <- ggplot(data.frame(k = k.values, tot.withinss = iss_values), aes(x = k, y = tot.withinss)) +
geom_point() +
geom_line() +
ggtitle("Elbow Method for Optimal Number of Clusters") +
xlab("Number of Clusters K") +
ylab("Total Within-Cluster Sum of Squares")
print(elbow_plot)
})
install.packages(c("arulesViz", "backports", "cachem", "cli", "crayon", "digest", "evaluate", "fansi", "farver", "fastmap", "forecast", "fracdiff", "fs", "ggplot2", "glue", "gtable", "highr", "knitr", "labeling", "leaps", "lifecycle", "lme4", "minqa", "munsell", "mvtnorm", "nloptr", "odbc", "openssl", "prettyunits", "prodlim", "progress", "quantmod", "quantreg", "ragg", "Rcpp", "RcppArmadillo", "readxl", "rematch", "rlang", "rmarkdown", "rpart.plot", "seriation", "SparseM", "stringi", "systemfonts", "textshaping", "timeDate", "tinytex", "tseries", "TTR", "urca", "utf8", "vegan", "withr", "xfun", "xts"))
customer_data_scaled <- scale(customer_data[,3:5])
test_that("K-means clustering works correctly with scaled data", {
iss <- function(k) {
kmeans(customer_data_scaled, k, iter.max = 100, nstart = 100, algorithm = "Lloyd")$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
expect_true(length(iss_values) == length(k.values))
expect_true(all(iss_values >= 0))
k6 <- kmeans(customer_data_scaled, 6, iter.max = 100, nstart = 100, algorithm = "Lloyd")
expect_true(!is.null(k6))
expect_true(length(k6$cluster) == nrow(customer_data_scaled))
expect_error({
ggplot(customer_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
}, NA)
expect_error({
ggplot(customer_data, aes(x = Spending.Score..1.100., y = Age)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
}, NA)
})
library(testthat)
install.packages("testthat")
install.packages("ggplot2")
install.packages("purrr")
install.packages("cluster")
install.packages("NbClust")
install.packages("factoextra")
install.packages("plotrix")
library(testthat)
library(ggplot2)
library(purrr)
library(cluster)
library(NbClust)
library(factoextra)
library(plotrix)
customer_data <- read.csv("Mall_Customers.csv")
test_that("Data is loaded correctly", {
expect_true(!is.null(customer_data))
expect_true(nrow(customer_data) > 0)
expect_true(ncol(customer_data) > 0)
})
test_that("Statistical summaries are calculated correctly", {
age_summary <- summary(customer_data$Age)
expect_true(length(age_summary) > 0)
expect_true(!is.null(sd(customer_data$Age)))
income_summary <- summary(customer_data$Annual.Income..k..)
expect_true(length(income_summary) > 0)
expect_true(!is.null(sd(customer_data$Annual.Income..k..)))
spending_summary <- summary(customer_data$Spending.Score..1.100.)
expect_true(length(spending_summary) > 0)
expect_true(!is.null(sd(customer_data$Spending.Score..1.100.)))
})
test_that("Visualizations are created without errors", {
expect_error(barplot(table(customer_data$Gender)), NA)
expect_error(hist(customer_data$Age), NA)
expect_error(hist(customer_data$Annual.Income..k..), NA)
expect_error(plot(density(customer_data$Annual.Income..k..)), NA)
expect_error(boxplot(customer_data$Spending.Score..1.100.), NA)
expect_error(hist(customer_data$Spending.Score..1.100.), NA)
})
customer_data_scaled <- scale(customer_data[,3:5])
test_that("K-means clustering works correctly with scaled data", {
iss <- function(k) {
kmeans(customer_data_scaled, k, iter.max = 100, nstart = 100, algorithm = "Lloyd")$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
expect_true(length(iss_values) == length(k.values))
expect_true(all(iss_values >= 0))
k6 <- kmeans(customer_data_scaled, 6, iter.max = 100, nstart = 100, algorithm = "Lloyd")
expect_true(!is.null(k6))
expect_true(length(k6$cluster) == nrow(customer_data_scaled))
expect_error({
ggplot(customer_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
}, NA)
expect_error({
ggplot(customer_data, aes(x = Spending.Score..1.100., y = Age)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
}, NA)
})
test_that("Optimal number of clusters is determined correctly", {
iss <- function(k) {
kmeans(customer_data_scaled, k, iter.max = 100, nstart = 100, algorithm = "Lloyd")$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
expect_true(length(iss_values) == length(k.values))
expect_true(all(iss_values >= 0))
elbow_plot <- ggplot(data.frame(k = k.values, tot.withinss = iss_values), aes(x = k, y = tot.withinss)) +
geom_point() +
geom_line() +
ggtitle("Elbow Method for Optimal Number of Clusters") +
xlab("Number of Clusters K") +
ylab("Total Within-Cluster Sum of Squares")
print(elbow_plot)
})
devtools::test()
load_all()
rm(list = c("iss", "kCols"))
devtools::test()
devtools::test()
View(customer_data)
customer_data <- read.csv("Mall_Customers.csv")
customer_data <- read.csv("Mall_Customers.csv")
View(customer_data)
View(customer_data)
getwd()
library(testthat)
library(ggplot2)
library(purrr)
library(cluster)
library(NbClust)
library(factoextra)
library(plotrix)
setwd("C:/Users/Acer/Desktop/INTEGRATION TESTING/custsegment")
customer_data <- read.csv("Mall_Customers.csv")
test_that("Data is loaded correctly", {
expect_true(!is.null(customer_data))
expect_true(nrow(customer_data) > 0)
expect_true(ncol(customer_data) > 0)
})
test_that("Statistical summaries are calculated correctly", {
age_summary <- summary(customer_data$Age)
expect_true(length(age_summary) > 0)
expect_true(!is.null(sd(customer_data$Age)))
income_summary <- summary(customer_data$Annual.Income..k..)
expect_true(length(income_summary) > 0)
expect_true(!is.null(sd(customer_data$Annual.Income..k..)))
spending_summary <- summary(customer_data$Spending.Score..1.100.)
expect_true(length(spending_summary) > 0)
expect_true(!is.null(sd(customer_data$Spending.Score..1.100.)))
})
test_that("Visualizations are created without errors", {
expect_error(barplot(table(customer_data$Gender)), NA)
expect_error(hist(customer_data$Age), NA)
expect_error(hist(customer_data$Annual.Income..k..), NA)
expect_error(plot(density(customer_data$Annual.Income..k..)), NA)
expect_error(boxplot(customer_data$Spending.Score..1.100.), NA)
expect_error(hist(customer_data$Spending.Score..1.100.), NA)
})
test_that("Optimal number of clusters is determined correctly", {
iss <- function(k) {
kmeans(customer_data_scaled, k, iter.max = 100, nstart = 100, algorithm = "Lloyd")$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
expect_true(length(iss_values) == length(k.values))
expect_true(all(iss_values >= 0))
elbow_plot <- ggplot(data.frame(k = k.values, tot.withinss = iss_values), aes(x = k, y = tot.withinss)) +
geom_point() +
geom_line() +
ggtitle("Elbow Method for Optimal Number of Clusters") +
xlab("Number of Clusters K") +
ylab("Total Within-Cluster Sum of Squares")
print(elbow_plot)
})
library(testthat)
library(ggplot2)
library(purrr)
library(cluster)
library(NbClust)
library(factoextra)
library(plotrix)
customer_data <- read.csv("Mall_Customers.csv")
test_that("Data is loaded correctly", {
expect_true(!is.null(customer_data))
expect_true(nrow(customer_data) > 0)
expect_true(ncol(customer_data) > 0)
})
test_that("Statistical summaries are calculated correctly", {
age_summary <- summary(customer_data$Age)
expect_true(length(age_summary) > 0)
expect_true(!is.null(sd(customer_data$Age)))
income_summary <- summary(customer_data$Annual.Income..k..)
expect_true(length(income_summary) > 0)
expect_true(!is.null(sd(customer_data$Annual.Income..k..)))
spending_summary <- summary(customer_data$Spending.Score..1.100.)
expect_true(length(spending_summary) > 0)
expect_true(!is.null(sd(customer_data$Spending.Score..1.100.)))
})
test_that("Visualizations are created without errors", {
expect_error(barplot(table(customer_data$Gender)), NA)
expect_error(hist(customer_data$Age), NA)
expect_error(hist(customer_data$Annual.Income..k..), NA)
expect_error(plot(density(customer_data$Annual.Income..k..)), NA)
expect_error(boxplot(customer_data$Spending.Score..1.100.), NA)
expect_error(hist(customer_data$Spending.Score..1.100.), NA)
})
test_that("Optimal number of clusters is determined correctly", {
iss <- function(k) {
kmeans(customer_data_scaled, k, iter.max = 100, nstart = 100, algorithm = "Lloyd")$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
expect_true(length(iss_values) == length(k.values))
expect_true(all(iss_values >= 0))
elbow_plot <- ggplot(data.frame(k = k.values, tot.withinss = iss_values), aes(x = k, y = tot.withinss)) +
geom_point() +
geom_line() +
ggtitle("Elbow Method for Optimal Number of Clusters") +
xlab("Number of Clusters K") +
ylab("Total Within-Cluster Sum of Squares")
print(elbow_plot)
})
library(testthat)
library(ggplot2)
library(purrr)
library(cluster)
library(NbClust)
library(factoextra)
library(plotrix)
customer_data <- read.csv("Mall_Customers.csv")
test_that("Data is loaded correctly", {
expect_true(!is.null(customer_data))
expect_true(nrow(customer_data) > 0)
expect_true(ncol(customer_data) > 0)
})
test_that("Statistical summaries are calculated correctly", {
age_summary <- summary(customer_data$Age)
expect_true(length(age_summary) > 0)
expect_true(!is.null(sd(customer_data$Age)))
income_summary <- summary(customer_data$Annual.Income..k..)
expect_true(length(income_summary) > 0)
expect_true(!is.null(sd(customer_data$Annual.Income..k..)))
spending_summary <- summary(customer_data$Spending.Score..1.100.)
expect_true(length(spending_summary) > 0)
expect_true(!is.null(sd(customer_data$Spending.Score..1.100.)))
})
test_that("Visualizations are created without errors", {
expect_error(barplot(table(customer_data$Gender)), NA)
expect_error(hist(customer_data$Age), NA)
expect_error(hist(customer_data$Annual.Income..k..), NA)
expect_error(plot(density(customer_data$Annual.Income..k..)), NA)
expect_error(boxplot(customer_data$Spending.Score..1.100.), NA)
expect_error(hist(customer_data$Spending.Score..1.100.), NA)
})
customer_data_scaled <- scale(customer_data[,3:5])
test_that("K-means clustering works correctly with scaled data", {
iss <- function(k) {
kmeans(customer_data_scaled, k, iter.max = 100, nstart = 100, algorithm = "Lloyd")$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
expect_true(length(iss_values) == length(k.values))
expect_true(all(iss_values >= 0))
k6 <- kmeans(customer_data_scaled, 6, iter.max = 100, nstart = 100, algorithm = "Lloyd")
expect_true(!is.null(k6))
expect_true(length(k6$cluster) == nrow(customer_data_scaled))
expect_error({
ggplot(customer_data, aes(x = Annual.Income..k.., y = Spending.Score..1.100.)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
}, NA)
expect_error({
ggplot(customer_data, aes(x = Spending.Score..1.100., y = Age)) +
geom_point(stat = "identity", aes(color = as.factor(k6$cluster))) +
scale_color_discrete(name=" ", breaks=c("1", "2", "3", "4", "5", "6"), labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6")) +
ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")
}, NA)
})
test_that("Optimal number of clusters is determined correctly", {
iss <- function(k) {
kmeans(customer_data_scaled, k, iter.max = 100, nstart = 100, algorithm = "Lloyd")$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
expect_true(length(iss_values) == length(k.values))
expect_true(all(iss_values >= 0))
elbow_plot <- ggplot(data.frame(k = k.values, tot.withinss = iss_values), aes(x = k, y = tot.withinss)) +
geom_point() +
geom_line() +
ggtitle("Elbow Method for Optimal Number of Clusters") +
xlab("Number of Clusters K") +
ylab("Total Within-Cluster Sum of Squares")
print(elbow_plot)
})
View(customer_data)
View(customer_data_scaled)
View(customer_data_scaled)
getwd()
devtools::test()
